{
  "version": 3,
  "sources": ["..\\src\\index.ts"],
  "sourcesContent": [
    "export interface LinearTickDrawState {\r\n    x: number\r\n    y: number\r\n    value: number\r\n    firstValue: number\r\n    lastValue: number\r\n}\r\n\r\nexport type DrawCallFn<STORE, RT = void> = (\r\n    ctx: CanvasRenderingContext2D,\r\n    store: STORE,\r\n    state: LinearTickDrawState,\r\n    params: LinearTickParams,\r\n) => RT\r\n\r\nexport interface LinearTickParams {\r\n    min?: number\r\n    max?: number\r\n    value: number\r\n    redundancy: number\r\n    anchorX: number\r\n    anchorY: number\r\n    directionX: number\r\n    directionY: number\r\n    density: number\r\n    minDensity: number\r\n    maxDensity: number\r\n    width: number\r\n    height: number\r\n    pixelRatio?: number\r\n}\r\n\r\nexport interface LinearTickDrawCall<STORE extends Record<string, any>> {\r\n    init?: DrawCallFn<STORE, void | null>\r\n    each: DrawCallFn<STORE>\r\n    final?: DrawCallFn<STORE>\r\n}\r\n\r\nexport interface LinearTickDefine<STORE extends Record<string, any>> {\r\n    multiply: number\r\n    zeroOffset?: number\r\n    maxDensityToShow?: number\r\n    shy?: boolean\r\n    drawCall: LinearTickDrawCall<STORE> | LinearTickDrawCall<STORE>[]\r\n}\r\n\r\nexport enum WhenResized {\r\n    DoNothing = 0,\r\n    Draw,\r\n    DrawNextFrame,\r\n}\r\n\r\nexport function valueToCoord(value: number, params: LinearTickParams) {\r\n    const { density } = params\r\n    const delta = value - params.value\r\n    return [\r\n        delta * params.directionX / density + params.anchorX * params.width,\r\n        delta * params.directionY / density + params.anchorY * params.height\r\n    ] as [number, number]\r\n}\r\n\r\nexport class LinearTick<STORE extends Record<string, any> = Record<string, any>> {\r\n    static defaultParams: LinearTickParams = {\r\n        value: 0,\r\n        redundancy: 1,\r\n        anchorX: 0,\r\n        anchorY: 0,\r\n        directionX: 1,\r\n        directionY: 0,\r\n        density: 0.1,\r\n        minDensity: 0.02,\r\n        maxDensity: 100,\r\n        width: 100,\r\n        height: 20,\r\n    }\r\n\r\n    #drawNextFrame?: ReturnType<typeof requestAnimationFrame>\r\n    #observedElem?: HTMLElement\r\n    #sizeObserver = new ResizeObserver(() => {\r\n        const elem = this.#observedElem\r\n        if (!elem) return\r\n        const dpr = this.params.pixelRatio ?? window.devicePixelRatio\r\n        const { offsetWidth, offsetHeight } = elem\r\n        const width = this.params.width = offsetWidth * dpr\r\n        const height = this.params.height = offsetHeight * dpr\r\n        const canvas = this.canvas\r\n        if (!canvas) return\r\n        canvas.width = width\r\n        canvas.height = height\r\n        canvas.style.width = `${offsetWidth}px`\r\n        canvas.style.height = `${offsetHeight}px`\r\n        if (this.whenResized === WhenResized.Draw) this.draw()\r\n        else if (this.whenResized === WhenResized.DrawNextFrame) this.drawNextFrame = true\r\n    })\r\n\r\n    initStore?: () => STORE\r\n    initDraw?: DrawCallFn<STORE, void | null>\r\n    finalDraw?: DrawCallFn<STORE>\r\n    canvas?: HTMLCanvasElement\r\n    params: LinearTickParams\r\n    ticks: LinearTickDefine<STORE>[]\r\n    whenResized = WhenResized.DoNothing\r\n\r\n    constructor(ticks?: LinearTickDefine<STORE>[], params?: Partial<LinearTickParams>) {\r\n        const { defaultParams } = LinearTick\r\n        this.params = params ? Object.assign({}, defaultParams, params) : { ...defaultParams }\r\n        this.ticks = ticks ?? []\r\n    }\r\n\r\n    get keepSameSizeWith() { return this.#observedElem }\r\n\r\n    set keepSameSizeWith(elem) {\r\n        if (this.#observedElem === elem) return\r\n        if (this.#observedElem) this.#sizeObserver.unobserve(this.#observedElem)\r\n        this.#observedElem = elem\r\n        if (elem) this.#sizeObserver.observe(elem)\r\n    }\r\n\r\n    get drawNextFrame() { return this.#drawNextFrame !== undefined }\r\n\r\n    set drawNextFrame(draw) {\r\n        if (draw === this.drawNextFrame) return\r\n        if (this.#drawNextFrame) {\r\n            cancelAnimationFrame(this.#drawNextFrame)\r\n            this.#drawNextFrame = undefined\r\n        } else this.#drawNextFrame = requestAnimationFrame(() => this.draw())\r\n    }\r\n\r\n    draw() {\r\n        this.drawNextFrame = false\r\n        const { params, canvas } = this\r\n        checkDensity(params)\r\n        if (!canvas) return\r\n        const ctx = canvas.getContext('2d')\r\n        if (!ctx) throw new Error('Failed to get 2d context')\r\n        const {\r\n            directionX: dx, directionY: dy, value: anchorValue, redundancy, width, height, density\r\n        } = params\r\n        const originX = params.anchorX * width\r\n        const originY = params.anchorY * height\r\n        const startUnit = -calcUnitToEdge(originX, originY, -dx, -dy, width, height) - redundancy\r\n        const endUnit = calcUnitToEdge(originX, originY, dx, dy, width, height) + redundancy\r\n        const firstValue = calcFirstValue(startUnit, density, anchorValue, params.min)\r\n        const lastValue = calcLastValue(endUnit, density, anchorValue, params.max)\r\n        const store = this.initStore?.() ?? {} as STORE\r\n        const state = { x: 0, y: 0, value: 0, firstValue, lastValue }\r\n        if (this.initDraw?.(ctx, store, state, params) === null) return\r\n        const deltaX = dx / density, deltaY = dy / density, { ticks } = this\r\n        for (const { 0: { drawCall }, 1: values } of filter(ticks, density, firstValue, lastValue))\r\n            for (const { init, each, final } of Array.isArray(drawCall) ? drawCall : [drawCall]) {\r\n                if (init?.(ctx, store, state, params) === null) continue\r\n                for (const value of values) {\r\n                    const delta = (state.value = value) - anchorValue\r\n                    state.x = delta * deltaX + originX\r\n                    state.y = delta * deltaY + originY\r\n                    each(ctx, store, state, params)\r\n                }\r\n                final?.(ctx, store, state, params)\r\n            }\r\n        this.finalDraw?.(ctx, store, state, params)\r\n    }\r\n}\r\n\r\nfunction checkDensity(params: LinearTickParams) {\r\n    if (params.density < params.minDensity) params.density = params.minDensity\r\n    else if (params.density > params.maxDensity) params.density = params.maxDensity\r\n}\r\n\r\nfunction filter<STORE extends Record<string, any>>(\r\n    ticks: LinearTickDefine<STORE>[], density: number, firstValue: number, lastValue: number\r\n): [LinearTickDefine<STORE>, number[]][] {\r\n    const result = ticks\r\n        .filter(({ maxDensityToShow: md }) => md === undefined ? true : md >= density)\r\n        .map(t => [t, firstTickValue(t, firstValue)] as [LinearTickDefine<STORE>, any])\r\n        .filter(({ 1: firstTickValue }) => firstTickValue <= lastValue)\r\n    const valuesDrawn = new Set()\r\n    for (let i = result.length - 1; i >= 0; --i) {\r\n        const { 0: { shy = false, multiply }, 1: firstTickValue } = result[i]\r\n        const steps = Math.floor((lastValue - firstTickValue) / multiply) + 1\r\n        const values = []\r\n        if (i) for (let n = 0; n < steps; ++n) {\r\n            const v = firstTickValue + n * multiply\r\n            if (shy && valuesDrawn.has(v)) continue\r\n            values.push(v)\r\n            valuesDrawn.add(v)\r\n        } else for (let n = 0; n < steps; ++n) {\r\n            const v = firstTickValue + n * multiply\r\n            if (!shy || !valuesDrawn.has(v)) values.push(v)\r\n        }\r\n        result[i][1] = values\r\n    }\r\n    return result\r\n}\r\n\r\nfunction isInfinitesimal(n: number) { return Math.abs(n) <= Number.EPSILON }\r\n\r\nfunction calcUnitToEdge<N extends number>(originX: N, originY: N, dx: N, dy: N, w: N, h: N) {\r\n    return Math.min(\r\n        isInfinitesimal(dx) ? Infinity : (dx > 0 ? w - originX : -originX) / dx,\r\n        isInfinitesimal(dy) ? Infinity : (dy > 0 ? h - originY : -originY) / dy,\r\n    )\r\n}\r\n\r\nfunction calcFirstValue(startUnit: number, density: number, anchorValue: number, min?: number) {\r\n    const v = anchorValue + startUnit * density\r\n    return min === undefined ? v : Math.max(min, v)\r\n}\r\n\r\nfunction calcLastValue(endUnit: number, density: number, anchorValue: number, max?: number) {\r\n    const v = anchorValue + endUnit * density\r\n    return max === undefined ? v : Math.min(max, v)\r\n}\r\n\r\nfunction firstTickValue<STORE extends Record<string, any>>(\r\n    { multiply, zeroOffset = 0 }: LinearTickDefine<STORE>, firstValue: number\r\n) { return Math.ceil((firstValue - zeroOffset) / multiply) * multiply + zeroOffset }"
  ],
  "mappings": "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",
  "debugId": "F151A07CE72FC09264756E2164756E21",
  "names": []
}